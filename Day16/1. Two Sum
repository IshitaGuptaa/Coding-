QUESTIONS:1. Two Sum
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].






CODE:

class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,Integer> A = new HashMap();
        int n=nums.length;
        for(int i=0;i<n;i++){
            if(A.containsKey(target-nums[i])){
                return new int[]{A.get(target-nums[i]),i};
            }
            else{
                A.put(nums[i],i);
            }
        }
        return new int[2];
    }
}


SUBMISSION:

Success
Runtime: 1 ms, faster than 99.97% of Java online submissions for Two Sum.
Memory Usage: 39.7 MB, less than 65.15% of Java online submissions for Two Sum.
