QUESTIONS: 268. Missing Number
Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

Example 1:

Input: [3,0,1]
Output: 2
Example 2:

Input: [9,6,4,2,3,5,7,0,1]
Output: 8
Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?






CODE:


class Solution {
    public int missingNumber(int[] nums) {
      Arrays.sort(nums);
        int n=nums.length;
        int i=0;
        for(i=0;i<n;i++){
            if(i!=nums[i]){
                return i;
            }
        }
        return i;
    }
}


SUBMISSIONS:

Success
Runtime: 5 ms, faster than 25.49% of Java online submissions for Missing Number.
Memory Usage: 40.4 MB, less than 49.18% of Java online submissions for Missing Number



CODE:
class Solution {
    public int missingNumber(int[] nums) {
        int n=nums.length;
        int sum=n*(n+1)/2;
        
        for(int i:nums){
            sum-=i;
        }
        
        return sum;
    }
}



SUBMISSION:
Success
Runtime: 0 ms, faster than 100.00% of Java online submissions for Missing Number.
Memory Usage: 40.1 MB, less than 72.75% of Java online submissions for Missing Number.
