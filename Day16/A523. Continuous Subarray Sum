QUESTIONS:  523. Continuous Subarray Sum
Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to a multiple of k, that is, sums up to n*k where n is also an integer.

Example 1:

Input: [23, 2, 4, 6, 7],  k=6
Output: True
Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.
Example 2:

Input: [23, 2, 6, 4, 7],  k=6
Output: True
Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.







CODE:

class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        
        int sum=0;
        HashMap<Integer,Integer> A = new HashMap();
        
        A.put(0,-1);
        
        int n=nums.length;
        for(int i=0;i<n;i++){
            sum+=nums[i];
            if(k!=0) sum%=k;
            if(A.containsKey(sum)){
                if(i-A.get(sum)>1){return true;}
            }
            else{
            A.put(sum,i);}
            
        }
        
        return false;
        
    }
}



SUBMISSION:

Success
Runtime: 2 ms, faster than 99.75% of Java online submissions for Continuous Subarray Sum.
Memory Usage: 40.1 MB, less than 72.13% of Java online submissions for Continuous Subarray Sum.
