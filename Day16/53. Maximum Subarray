QUESTIONS: 53. Maximum Subarray
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.




CODE:
class Solution {
    public int maxSubArray(int[] nums) {
        int left=0;
        int n=nums.length;
        int sum=0;
        int max=Integer.MIN_VALUE;
        for(int right=0;right<n;right++){
            sum+=nums[right];
            
            if(sum<=nums[right]){
                sum=nums[right];
                left=right;
            }
            
            max=Math.max(max,sum);
        }
        return max;
    }
}


SUBMISSION:
Success
Runtime: 0 ms, faster than 100.00% of Java online submissions for Maximum Subarray.
Memory Usage: 39.6 MB, less than 62.04% of Java online submissions for Maximum Subarray.
