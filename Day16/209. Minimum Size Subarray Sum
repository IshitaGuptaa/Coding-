QUESTIONS: 209. Minimum Size Subarray Sum
Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

Example: 

Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.
Follow up:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n). 





CODE:

class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        
        int left=0;
        int sum=0;
        int n=nums.length;
        int min=Integer.MAX_VALUE;
        for(int right=0;right<n;right++){
            sum+=nums[right];
            while(sum>=s){
                min=Math.min(right-left+1,min);
                sum-=nums[left];
                left++;
                }
        }
        
        if(min==Integer.MAX_VALUE){return 0;}
        return min;
    }
}


SUBMISSION:

Success
Runtime: 1 ms, faster than 99.97% of Java online submissions for Minimum Size Subarray Sum.
Memory Usage: 39.6 MB, less than 68.50% of Java online submissions for Minimum Size Subarray Sum.
