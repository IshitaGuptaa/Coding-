QUESTIONS: 1394. Find Lucky Integer in an Array
Given an array of integers arr, a lucky integer is an integer which has a frequency in the array equal to its value.

Return a lucky integer in the array. If there are multiple lucky integers return the largest of them. If there is no lucky integer return -1.

 

Example 1:

Input: arr = [2,2,3,4]
Output: 2
Explanation: The only lucky number in the array is 2 because frequency[2] == 2.
Example 2:

Input: arr = [1,2,2,3,3,3]
Output: 3
Explanation: 1, 2 and 3 are all lucky numbers, return the largest of them.
Example 3:

Input: arr = [2,2,2,3,3]
Output: -1
Explanation: There are no lucky numbers in the array.
Example 4:

Input: arr = [5]
Output: -1
Example 5:

Input: arr = [7,7,7,7,7,7,7]
Output: 7






CODE:

class Solution {
    public int findLucky(int[] arr) {
        HashMap<Integer,Integer> A = new HashMap();
        int n = arr.length;
        int max=-1;
        for(int i=0;i<n;i++){
             A.put(arr[i],A.getOrDefault(arr[i],0)+1);     
        }
        
        for(int i=0;i<n;i++){
             if(A.get(arr[i])==arr[i]){max=Math.max(max,arr[i]);}
        }
        return max;
    }
}


SUBMISSION:
Success
Runtime: 4 ms, faster than 44.53% of Java online submissions for Find Lucky Integer in an Array.
Memory Usage: 39 MB, less than 83.23% of Java online submissions for Find Lucky Integer in an Array.




CODE:
class Solution {
    public int findLucky(int[] arr) {
      int[] B = new int[501];
        int res =-1;
        for (int i =0; i < arr.length ; i++){
            B[arr[i]]++;
        }
        for (int i=1 ; i < 501; i++){
            if (B[i] == i){
                res = i;
            }
        }
        return res;
        
    }
}


SUBMISSION:
Success
Runtime: 1 ms, faster than 99.44% of Java online submissions for Find Lucky Integer in an Array.
Memory Usage: 38.9 MB, less than 94.06% of Java online submissions for Find Lucky Integer in an Array.
