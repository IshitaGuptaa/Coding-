QUESTION:54. Spiral Matrix
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]






CODE:


class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
     List<Integer> A =  new LinkedList();
        int count=0;
        int row=matrix.length;
        if(row==0){return A;}
        int col=matrix[0].length;
        
        for(count=0;count<((row+1)/2);count++){
            for(int i=count;i<(col-count);i++){
                A.add(matrix[count][i]);
            }
            for(int i=count+1;i<(row-count);i++){
                 if(col-count-1>=0 && count<=col-count-1){
                 A.add(matrix[i][col-count-1]);}
            }
            for(int i=(col-count-2);i>=count;i--){
                if(count+1<=row-count-1){
                 A.add(matrix[row-count-1][i]);}
            }
            for(int i=(row-count-2);i>count;i--){
                if(count+1<=col-count-1){
                A.add(matrix[i][count]);}
            }
        }
        
        return A;
    }
}



SUBMISSION:

Success
Runtime: 0 ms, faster than 100.00% of Java online submissions for Spiral Matrix.
Memory Usage: 37.4 MB, less than 72.18% of Java online submissions for Spiral Matrix.
