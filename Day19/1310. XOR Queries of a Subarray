QUESTION:  1310. XOR Queries of a SubarrayGiven the array arr of positive integers and the array queries where queries[i] = [Li, Ri], for each query i compute the XOR of elements from Li to Ri (that is, arr[Li] xor arr[Li+1] xor ... xor arr[Ri] ). Return an array containing the result for the given queries.
 

Example 1:

Input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]
Output: [2,7,14,8] 
Explanation: 
The binary representation of the elements in the array are:
1 = 0001 
3 = 0011 
4 = 0100 
8 = 1000 
The XOR values for queries are:
[0,1] = 1 xor 3 = 2 
[1,2] = 3 xor 4 = 7 
[0,3] = 1 xor 3 xor 4 xor 8 = 14 
[3,3] = 8
Example 2:

Input: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]
Output: [8,0,4,4]
 

Constraints:

1 <= arr.length <= 3 * 10^4
1 <= arr[i] <= 10^9
1 <= queries.length <= 3 * 10^4
queries[i].length == 2
0 <= queries[i][0] <= queries[i][1] < arr.length







Given the array arr of positive integers and the array queries where queries[i] = [Li, Ri], for each query i compute the XOR of elements from Li to Ri (that is, arr[Li] xor arr[Li+1] xor ... xor arr[Ri] ). Return an array containing the result for the given queries.
 

Example 1:

Input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]
Output: [2,7,14,8] 
Explanation: 
The binary representation of the elements in the array are:
1 = 0001 
3 = 0011 
4 = 0100 
8 = 1000 
The XOR values for queries are:
[0,1] = 1 xor 3 = 2 
[1,2] = 3 xor 4 = 7 
[0,3] = 1 xor 3 xor 4 xor 8 = 14 
[3,3] = 8
Example 2:

Input: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]
Output: [8,0,4,4]
 

Constraints:

1 <= arr.length <= 3 * 10^4
1 <= arr[i] <= 10^9
1 <= queries.length <= 3 * 10^4
queries[i].length == 2
0 <= queries[i][0] <= queries[i][1] < arr.length







CODE:

class Solution {
    public int[] xorQueries(int[] arr, int[][] queries) {
        int qn=queries.length;
        int [][]q = new int[qn][3];
        for(int i=0;i<qn;i++){
            q[i][0] = queries[i][0];
            q[i][1] = queries[i][1];
            q[i][2] = i;
        }
        int n = arr.length;
        int block = (int)(Math.sqrt(n));
        Arrays.sort(q, new Comparator<int []>(){
           public int compare(int []a1, int []a2){
               if(a1[0]/block != a2[0]/block) {
                   return (a1[0]/block-a2[0]/block);
                }
               else {return(a1[1]-a2[1]);}
                  
           
        }});
        
                    
        
        
        
        int que[] = new int[qn];
        int xor=arr[0];
        int oldl=0;
        int oldr=0;
        int left=0;
        int right=0;
        for(int i=0;i<qn;i++){
            left=q[i][0];
            right=q[i][1];

            while(left<oldl){
               xor^=arr[--oldl];
            }
            
            while(left>oldl){
                xor^=arr[oldl++];
               
            }
            
            
            while(right<oldr){
                xor^=arr[oldr--];
            }
            
            while(right>oldr){
                xor^=arr[++oldr];
            }
            que[q[i][2]]=xor;
        }
        
            return que;
    }
}


SUBMISSION:

Success
Runtime: 49 ms, faster than 27.82% of Java online submissions for XOR Queries of a Subarray.
Memory Usage: 67 MB, less than 5.25% of Java online submissions for XOR Queries of a Subarray.




CODE:

class Solution {
    public int[] xorQueries(int[] arr, int[][] queries) {
        int n=arr.length;
        int qn=queries.length;
        int xor[] = new int[n+1];
        xor[0]=0;
        for(int i=0;i<n;i++){
            xor[i+1]=xor[i]^arr[i];
        }
        
        int res[] = new int[qn];
        for(int i=0;i<qn;i++){
            res[i]=xor[queries[i][0]]^xor[queries[i][1]+1];
        }
        return res;
    }
}


SUBMISSION:

Success
Runtime: 1 ms, faster than 100.00% of Java online submissions for XOR Queries of a Subarray.
Memory Usage: 50.5 MB, less than 75.34% of Java online submissions for XOR Queries of a Subarray.
