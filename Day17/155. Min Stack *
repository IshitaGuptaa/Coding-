QUESTIONS: 155. Min Stack
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2






CODE:

class MinStack {

    Stack<Integer> s1 ;
    Stack<Integer> s2 ;
    
    public MinStack() {
         this.s1 = new Stack();
         this.s2 = new Stack();
    }
    
    public void push(int x) {
        if(s2.isEmpty() || x<=s2.peek()){
            s2.push(x);
        }
        s1.push(x);
    }
    
    public void pop() {
        
        if(s1.peek().equals(s2.peek())){
            s2.pop();
        }
        s1.pop();
    }
    
    public int top() {
        return s1.peek();
    }
    
    public int getMin() {
        return s2.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
 
 
 SUBMISSION:
Success
Runtime: 5 ms, faster than 76.14% of Java online submissions for Min Stack.
Memory Usage: 41.1 MB, less than 85.43% of Java online submissions for Min Stack.




---ORR---
(Using one stack also solution exists)

CODE:


SUBMISSION:
