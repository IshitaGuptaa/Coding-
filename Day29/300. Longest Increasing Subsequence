QUESTIONS: 300. Longest Increasing Subsequence
Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
Note:

There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.
Follow up: Could you improve it to O(n log n) time complexity?


CODE:

class Solution {
    public int lengthOfLIS(int[] array) {
        int n=array.length;
        int[] dp = new int[n];
        
        Arrays.fill(dp,1);
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(array[i]>array[j] && dp[i]<dp[j]+1){
                    dp[i]=dp[j]+1;
                }
            }
        }
        int max=0;
        for(int i=0;i<n;i++){
            max=Math.max(max,dp[i]);
        }
        return max;
    }
}



SUBMISSION:
Success
Runtime: 15 ms, faster than 28.18% of Java online submissions for Longest Increasing Subsequence.
Memory Usage: 37 MB, less than 95.10% of Java online submissions for Longest Increasing Subsequence.
