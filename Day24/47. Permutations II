QUESTION: 47. Permutations II
Given a collection of numbers that might contain duplicates, return all possible unique permutations.

Example:

Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]




CODE:
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList();
        boolean[] bool = new boolean[nums.length];
        List<Integer> curr = new ArrayList();
        func(res,curr,nums,bool);
        return res;
    }
    
    public void func(List<List<Integer>> res,List<Integer> curr,int[] nums,boolean[] bool){
        if(curr.size()==nums.length){
            res.add(new ArrayList(curr));
            return;
        }
        
        for(int i=0;i<nums.length;i++){
            if(bool[i] || i>0 && nums[i]==nums[i-1] && !bool[i-1]) continue;
                curr.add(nums[i]);
                bool[i]=true;
                func(res,curr,nums,bool);
                curr.remove(curr.size()-1);
                bool[i]=false;
        }
    }
}

SUBISSION:

Success
Runtime: 2 ms, faster than 70.54% of Java online submissions for Permutations II.
Memory Usage: 39.8 MB, less than 95.96% of Java online submissions for Permutations II.
