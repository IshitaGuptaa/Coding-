QUESTION: 46. Permutations
Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]






CODE:
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList();
        boolean[] bool = new boolean[nums.length];
        List<Integer> curr = new ArrayList();
        func(res,curr,nums,bool);
        return res;
    }
    
    public void func(List<List<Integer>> res,List<Integer> curr,int[] nums,boolean[] bool){
        if(curr.size()==nums.length){
            res.add(new ArrayList(curr));
            return;
        }
        
        for(int i=0;i<nums.length;i++){
            if(!bool[i]){
                curr.add(nums[i]);
                bool[i]=true;
                func(res,curr,nums,bool);
                curr.remove(curr.size()-1);
                bool[i]=false;
            }
        }
    }
}


SUBMISSION:
Success
Runtime: 1 ms, faster than 94.79% of Java online submissions for Permutations.
Memory Usage: 39.6 MB, less than 87.95% of Java online submissions for Permutations.
