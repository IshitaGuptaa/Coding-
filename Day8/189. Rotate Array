QUESTION:
Given an array, rotate the array to the right by k steps, where k is non-negative.

Follow up:

Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
Could you do it in-place with O(1) extra space?
 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 

Constraints:

1 <= nums.length <= 2 * 10^4
It's guaranteed that nums[i] fits in a 32 bit-signed integer.
k >= 0



CODE:

class Solution {
    public void rotate(int[] nums, int k) {
        k=k%nums.length;
        reverse(nums,0,nums.length);
        reverse(nums,0,k);
        reverse(nums,k,nums.length);
    }
    
    public int[] reverse(int[] nums,int a,int b){
        while(a<b){
            int temp=nums[a];
            nums[a]=nums[b-1];
            nums[b-1]=temp;
            a++;
            b--;
 
        }
        return nums;
    }
     
}


SUBMISSION: 

Success 
Runtime: 0 ms, faster than 100.00% of Java online submissions for Rotate Array.
Memory Usage: 39.7 MB, less than 94.29% of Java online submissions for Rotate Array.




---OR---

CODE:
class Solution {
    public void rotate(int[] nums, int k) {
        int temp=0;
        
        int right=nums.length-1;
        while(k>0){
            temp=nums[right];
            for(int i=right;i>0;i--){
                nums[i]=nums[i-1];
            }
            nums[0]=temp;
            k--;
        }
    }
}

SUBMISSION:
Success
Runtime: 185 ms, faster than 22.31% of Java online submissions for Rotate Array.
Memory Usage: 40.4 MB, less than 44.78% of Java online submissions for Rotate Array.



-----OR----

CODE:

class Solution {
    public void rotate(int[] nums, int k) {
        int[] temp=new int[k];
        
        k=k%nums.length;
        
        int n=k;
        for(int i=nums.length-1;i>nums.length-k-1;i--){
            temp[--n]=nums[i];

        }
        
        for(int i=nums.length-1;i>k-1;i--){
            nums[i]=nums[i-k]; 
        }
        
        while(k>0){
            
            nums[k-1]=temp[k-1];
            k--;
        }
        
    }
}

SUBMISSION:
Success
Runtime: 0 ms, faster than 100.00% of Java online submissions for Rotate Array.
Memory Usage: 39.9 MB, less than 84.64% of Java online submissions for Rotate Array.
