QUESTION:1464. Maximum Product of Two Elements in an Array
Given the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).
 

Example 1:

Input: nums = [3,4,5,2]
Output: 12 
Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. 
Example 2:

Input: nums = [1,5,4,5]
Output: 16
Explanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.
Example 3:

Input: nums = [3,7]
Output: 12
 

Constraints:

2 <= nums.length <= 500
1 <= nums[i] <= 10^3




CODE:

class Solution {
    public int maxProduct(int[] nums) {
        if(nums.length<2) return 0;
        Arrays.sort(nums);
        int right=nums.length-1;
        return (nums[right]-1)*(nums[right-1]-1);
    }
}


SUBMISSION:
Success
Runtime: 1 ms, faster than 71.41% of Java online submissions for Maximum Product of Two Elements in an Array.
Memory Usage: 39.3 MB, less than 55.15% of Java online submissions for Maximum Product of Two Elements in an Array



----OR---

//TO AVOID USE OF ARRAYSORT

CODE:

class Solution {
    public int maxProduct(int[] nums) {
        if(nums.length<2) return 0;
        
        int max1=0;
        int max2=0;
        
        for(int i=0;i<nums.length;i++){
            if(nums[i]>=max1){
                max2=max1;
                max1=nums[i];
            }
            
            else if(nums[i]>=max2){
                max2=nums[i];
                //System.out.println("max2"+max2);
            }
        }
        
        return (max1-1)*(max2-1);
    }
}

SUBMISSION:

Success
Runtime: 0 ms, faster than 100.00% of Java online submissions for Maximum Product of Two Elements in an Array.
Memory Usage: 39.1 MB, less than 76.00% of Java online submissions for Maximum Product of Two Elements in an Array.
