QUESTIONS:844. Backspace String Compare
Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

Example 1:

Input: S = "ab#c", T = "ad#c"
Output: true
Explanation: Both S and T become "ac".
Example 2:

Input: S = "ab##", T = "c#d#"
Output: true
Explanation: Both S and T become "".
Example 3:

Input: S = "a##c", T = "#a#c"
Output: true
Explanation: Both S and T become "c".
Example 4:

Input: S = "a#c", T = "b"
Output: false
Explanation: S becomes "c" while T becomes "b".
Note:

1 <= S.length <= 200
1 <= T.length <= 200
S and T only contain lowercase letters and '#' characters.





CODE:

class Solution {
    public boolean backspaceCompare(String S, String T) {
        int n1=S.length();
        int n2=T.length();
        char[] Sc = S.toCharArray();
        char[] Tc = T.toCharArray();
        int count=0;
        StringBuffer s=new StringBuffer();
        StringBuffer t=new StringBuffer();
        
        for(int right=n1-1;right>=0;right--){
            if(Sc[right]=='#'){count++;}
            else if(Sc[right]!='#' && count>0){
                count--;
            }
            else{
                s.append(String.valueOf(Sc[right]));
            }
        }
        
        count=0;
        for(int right=n2-1;right>=0;right--){
            if(Tc[right]=='#'){count++;}
            
            else if(Tc[right]!='#' && count>0){
                count--;
            } 
            else{
                t.append(String.valueOf(Tc[right]));
            }
        }
        
        
        
       return (s.toString().equals(t.toString()));
    }
}


SUBMISSION:

Success
Runtime: 1 ms, faster than 79.27% of Java online submissions for Backspace String Compare.
Memory Usage: 38 MB, less than 55.39% of Java online submissions for Backspace String Compare.
