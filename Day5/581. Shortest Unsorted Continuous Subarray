QUESTION:581. Shortest Unsorted Continuous Subarray
Given an integer array, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order, too.
You need to find the shortest such subarray and output its length.
Example 1:
Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Note:
Then length of the input array is in range [1, 10,000].
The input array may contain duplicates, so ascending order here means <=.


CODE:
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int[] sortedArr=new int[nums.length];
        int count=0;
        for(int i:nums) // either we loop through or we do nums.clone() same thing
        {
            sortedArr[count++]=i;
        }
        Arrays.sort(sortedArr);
        
        int left=0;
        int right=nums.length-1;
        boolean flag1=false;
        boolean flag2=false;
        while(left<=right){
            if(nums[left]!=sortedArr[left]){
                flag1=true;
            }
            else{
                left++;
            }
               if(nums[right]!=sortedArr[right]){         
                flag2=true;
        }else{
                   right--;
               }
               
               if (flag1==true && flag2==true){
                   return right-left+1; }
        }
        return 0;
    }
}


SUBMISSION:

Success
Runtime: 6 ms, faster than 54.09% of Java online submissions for Shortest Unsorted Continuous Subarray.
Memory Usage: 41 MB, less than 46.09% of Java online submissions for Shortest Unsorted Continuous Subarray.


// YOU WILL SEE IT IS NOT VERY OPTIMAL SOLUTION. IF WE GO THROUGH LEETCODE SOLUTION, THERE IS ONE SOLUTION THAT DOES NOT TAKE ANY EXTRA SPACE AND IS A VERY OPTIMAL SOLUTION FOR QUESTIONS LIKE THIS
