QUESTIONS: 
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Follow up:
Could you solve it in linear time?

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7] 
Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
 

Constraints:

1 <= nums.length <= 10^5
-10^4 <= nums[i] <= 10^4
1 <= k <= nums.length



CODE:

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
     
        int n=nums.length;
        int[] res = new int[n-k+1];
        if(n==1) return nums;
        int left=0;
        int max=Integer.MIN_VALUE;
        
        for(int right=0;right<n;right++){
            
            max=Math.max(max,nums[right]);
            
            if(right-left+1==k){
                res[left]=max;
                
                if(nums[left]==max && left!=n-k){
                    max=Integer.MIN_VALUE;
                    for(int i=1;i<k+1;i++){
                        max=Math.max(nums[left+i],max);
                    }
                }
                left++;
            }
            
            if(left==n-k+1){break;}
        }
        return res;
    }
}


SUBMISSION:
Success 
Runtime: 4 ms, faster than 95.58% of Java online submissions for Sliding Window Maximum.
Memory Usage: 50.9 MB, less than 90.82% of Java online submissions for Sliding Window Maximum.
