QUESTION: 567. Permutation in String
Medium

Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

 

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False
 

Constraints:

The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].






CODE:
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        
        int[] S1 = new int[26];
        for(char c: s1.toCharArray()){
            S1[c-'a']++;
        }
        
         
        boolean flag=true;
        char[] S2 = s2.toCharArray();
        int left=0;
        int n1=s1.length();
        int n2=s2.length();
        int count=0;
        for(int right=0;right<n2;right++){
           
            if(left==n2-n1+1) break;
            flag=true;
            
           if(S1[S2[right]-'a']<0){
            
                 S1[S2[right]-'a']--;
            }
            
            if(S1[S2[right]-'a']>0){
                if(S1[S2[right]-'a']==1){S1[S2[right]-'a']=-1;}
                else {S1[S2[right]-'a']--;}
            }
            
            
            
            
            if(right-left+1==n1){
            
                for(int i=0;i<26;i++){
               
                if(S1[i]>0){
                    flag=false;
                }
            }
              
                
                           
            if(flag==true){
                return true;
            }
                
                
                if(S1[S2[left]-'a']!=0){
                    if(S1[S2[left]-'a']==-1){S1[S2[left]-'a']=0;}
                    S1[S2[left]-'a']++;
                } 
               
                left++;
            }
            
            
        }
        return false;
    }
}

SUBMISSION:
Success
Runtime: 4 ms, faster than 88.34% of Java online submissions for Permutation in String.
Memory Usage: 39.3 MB, less than 88.90% of Java online submissions for Permutation in String.
