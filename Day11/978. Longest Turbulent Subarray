 QUESTION:978. Longest Turbulent Subarray
 Medium

A subarray A[i], A[i+1], ..., A[j] of A is said to be turbulent if and only if:

For i <= k < j, A[k] > A[k+1] when k is odd, and A[k] < A[k+1] when k is even;
OR, for i <= k < j, A[k] > A[k+1] when k is even, and A[k] < A[k+1] when k is odd.
That is, the subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.

Return the length of a maximum size turbulent subarray of A.

 

Example 1:

Input: [9,4,2,10,7,8,8,1,9]
Output: 5
Explanation: (A[1] > A[2] < A[3] > A[4] < A[5])
Example 2:

Input: [4,8,12,16]
Output: 2
Example 3:

Input: [100]
Output: 1
 

Note:

1 <= A.length <= 40000
0 <= A[i] <= 10^9




 
 CODE:
  
  class Solution {
    public int maxTurbulenceSize(int[] A) {
        
        int count=0;
        int max=-2;
        int left=0;
        int n=A.length;
        if(n<3) return 1;
        for(int right=1;right<n-1;right++){
            if((A[right-1]<A[right] && A[right+1]<A[right]) || (A[right-1]>A[right] && A[right+1]>A[right])){
               
                count++;
                
            }
            else if((A[right-1]==A[right] && A[right+1]==A[right])){
                max=Math.max(max,-1);
            }
           
            else{
                max=Math.max(max,count);
               
                count=0;
            }
            
            if(right==n-2 && max!=-1){
                 max=Math.max(max,count);
            }
        }
        
        return max+2;
        
    }
}


SUBMISSION:
Success
Runtime: 4 ms, faster than 96.59% of Java online submissions for Longest Turbulent Subarray.
Memory Usage: 43.2 MB, less than 66.70% of Java online submissions for Longest Turbulent Subarray.
