QUESTION: 216. Combination Sum III
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]







CODE:

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>>  res = new ArrayList();
        List<Integer> curr = new ArrayList();
        func(res,curr,k,n,1,0);
        return res;
    }
    
    public void func( List<List<Integer>> res, List<Integer> curr, int k, int n, int index,int sum){
        
        if(curr.size()==k && sum==n){
            res.add(new ArrayList(curr));
            return;
        }
        else if(curr.size()>k){
            return;
        }
        
        
        for(int i=index;i<10;i++){
            sum+=i;
            curr.add(i);
            func(res,curr,k,n,i+1,sum);
            sum-=curr.get(curr.size()-1);
            curr.remove(curr.size()-1);
        }
    }
}



SUBMISSION:

Success
Runtime: 0 ms, faster than 100.00% of Java online submissions for Combination Sum III.
Memory Usage: 37.1 MB, less than 54.51% of Java online submissions for Combination Sum III.
