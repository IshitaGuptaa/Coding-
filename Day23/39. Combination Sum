QUESTIONS: 39. Combination Sum
Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]
 

Constraints:

1 <= candidates.length <= 30
1 <= candidates[i] <= 200
Each element of candidate is unique.
1 <= target <= 500








CODE:
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList();
        List<Integer> curr = new ArrayList();
        func(res,curr,target,candidates,0);
        return res;
    }
    
    
    public void func(List<List<Integer>> res, List<Integer> curr,int target,int[] candidates,int index){
        
        if(target==0){
            res.add(new ArrayList(curr));
            return;
        }
        if(target<0 || index>=candidates.length ){
            return;
        }

            curr.add(candidates[index]);
            func(res,curr,target-candidates[index],candidates,index);
            curr.remove(curr.size()-1);
            func(res,curr,target,candidates,index+1);
        
        
    }
}


SUBMISSION:

Success
Runtime: 3 ms, faster than 85.27% of Java online submissions for Combination Sum.
Memory Usage: 39.8 MB, less than 65.64% of Java online submissions for Combination Sum.
