QUESTION: 40. Combination Sum II
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]







CODE:

class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
         List<List<Integer>> res =  new ArrayList();
        Arrays.sort(candidates);
         List<Integer> curr = new ArrayList();
        func(res,curr,candidates,target,0);
        return res;
    }
    
    public void func(List<List<Integer>> res,List<Integer> curr,int[] candidates,int target,int index){
        
       
        if(target==0){
            res.add(new ArrayList(curr));
            return ;
        }
        
        else if(target<0 || index==candidates.length){
            return ;
        }


        for(int i=index;i<candidates.length;i++){
            if(i==index || candidates[i]!=candidates[i-1]){
                curr.add(candidates[i]);
                func(res,curr,candidates,target-candidates[i],i+1);
                curr.remove(curr.size()-1);
            }
        }
        
    }
    
}



SUBMISSION:

Success
Runtime: 4 ms, faster than 78.64% of Java online submissions for Combination Sum II.
Memory Usage: 39.7 MB, less than 73.91% of Java online submissions for Combination Sum II.



