PROBLEM:421. Maximum XOR of Two Numbers in an Array
Given a non-empty array of numbers, a0, a1, a2, … , an-1, where 0 ≤ ai < 231.

Find the maximum result of ai XOR aj, where 0 ≤ i, j < n.

Could you do this in O(n) runtime?

Example:

Input: [3, 10, 5, 25, 2, 8]

Output: 28

Explanation: The maximum result is 5 ^ 25 = 28.
 
 
 
 
 


CODE:
class Solution {
    public int findMaximumXOR(int[] nums) {
        int n=nums.length;int max=0;
        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                max=Math.max(max,nums[i]^nums[j]);
            }
        }
        return max;
    }
}


SUBMISSION:
Success
Runtime: 155 ms, faster than 19.84% of Java online submissions for Maximum XOR of Two Numbers in an Array.
Memory Usage: 39.2 MB, less than 96.64% of Java online submissions for Maximum XOR of Two Numbers in an Array.
