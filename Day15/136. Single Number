QUESTION: 136. Single Number
Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4




CODE:

class Solution {
    public int singleNumber(int[] nums) {
  
        HashSet<Integer> A = new HashSet();
        int n=nums.length;
        for(int i=0;i<n;i++){
            if(!A.contains(nums[i])){
                A.add(nums[i]);
            }
            else{
                A.remove(nums[i]);
            }
        }
        
       Iterator<Integer> itr = A.iterator();
        return itr.next();
 
    }
}


SUBMISSION:
Success
Runtime: 5 ms, faster than 45.36% of Java online submissions for Single Number.
Memory Usage: 40.1 MB, less than 86.57% of Java online submissions for Single Number



----OR----

CODE:
class Solution {
    public int singleNumber(int[] nums) {
        int ret = nums[0];
        for (int i = 1; i < nums.length; i++) {
            ret ^= nums[i];
        }
        return ret;
    }
}

SUBMISSION:
Success
Runtime: 0 ms, faster than 100.00% of Java online submissions for Single Number.
Memory Usage: 40.9 MB, less than 41.93% of Java online submissions for Single Number.
