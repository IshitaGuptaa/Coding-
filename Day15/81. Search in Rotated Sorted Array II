QUESTION: 81. Search in Rotated Sorted Array II
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).

You are given a target value to search. If found in the array return true, otherwise return false.

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
Follow up:

This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.
Would this affect the run-time complexity? How and why?








CODE:

class Solution {
    public boolean search(int[] nums, int target) {
        int n=nums.length;
        if(n==0) return false;
       
        int count=0;
        for(int i=1;i<n;i++){
            if(nums[i]<nums[i-1]){
                count=i;
                break;
            }
        }
        
        if(count>0 && (nums[count-1]<target && nums[count]>target)){
          
            return false;
        }
        
        if(target>=nums[0]){
            for(int i=0;i<count;i++){
               
                if(nums[i]==target){
                    return true;
                }
            }
        }
        if(nums[count]<=target){
            
            for(int i=count;i<n;i++){
                if(nums[i]==target){
                    return true;
                }
            }
        }
        
        return false;
    }
}



SUBMISSION:

Success
Runtime: 0 ms, faster than 100.00% of Java online submissions for Search in Rotated Sorted Array II.
Memory Usage: 39.8 MB, less than 42.74% of Java online submissions for Search in Rotated Sorted Array II.
