QUESTION: 922. Sort Array By Parity II
Given an array A of non-negative integers, half of the integers in A are odd, and half of the integers are even.

Sort the array so that whenever A[i] is odd, i is odd; and whenever A[i] is even, i is even.

You may return any answer array that satisfies this condition.
Example 1:

Input: [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.


CODE:
class Solution {
    public int[] sortArrayByParityII(int[] A) {

        LinkedList<Integer> L = new LinkedList();
        LinkedList<Integer> Le = new LinkedList();
        int n=A.length;
        
        for(int i=0;i<n;i++){
             if(A[i]%2!=0){
                L.add(A[i]);
                }
            else{
                Le.add(A[i]);
                }
            }
        
        int odd=0;
        int even=0;
        
        for(int i=0;i<n;i++){
            if(i%2!=0){
                A[i]=L.get(odd++);
            }
            else{
                A[i]=Le.get(even++);
                
            }
        }
        
        
        return A;
    }
    
    
}



SUBMISSION:
Success
Runtime: 731 ms, faster than 5.61% of Java online submissions for Sort Array By Parity II.
Memory Usage: 52.2 MB, less than 28.17% of Java online submissions for Sort Array By Parity II.



---orrr---
CODE:

class Solution {
    public int pivotIndex(int[] nums) {
        
      
        int n=nums.length;
      if(n<2) return  -1; 
        
        int mid=0;
        
         int sumleft=0;
         int sumright=0;
        
        
        for(int right=mid+1;right<n;right++){
            sumright+=nums[right];
        }
        
        while(mid>=0 && mid<n){
           
            if(sumleft==sumright){return mid;}
            if(mid<n-1){
            sumleft+=nums[mid];
            sumright-=nums[mid+1];}
            
            mid++;
           
          
           
            
        }
        
        
        
        return -1;
    }
}





SUBMISSION:

Success
Runtime: 1 ms, faster than 100.00% of Java online submissions for Find Pivot Index.
Memory Usage: 40.4 MB, less than 50.52% of Java online submissions for Find Pivot Index.
