QUESTION: 387. First Unique Character in a String
Given a string, find the first non-repeating character in it and return its index. If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode"
return 2.
 

Note: You may assume the string contains only lowercase English letters.







CODE:

class Solution {
    public int firstUniqChar(String s) {
        int A[] = new int[26];
        for(char c:s.toCharArray()){
            if(A[c-'a']==0){
                A[c-'a']=1;
            }
            else{
                A[c-'a']=-1;
            }
        }
        
        
        for(char c:s.toCharArray()){
            if(A[c-'a']==1){return s.indexOf(c);}
        }
        return -1;
    }
}


SUBMISSION:

Success
Runtime: 6 ms, faster than 92.86% of Java online submissions for First Unique Character in a String.
Memory Usage: 40.1 MB, less than 65.55% of Java online submissions for First Unique Character in a String.
