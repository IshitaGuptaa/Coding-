QUESTION: 1380. Lucky Numbers in a Matrix
Given a m * n matrix of distinct numbers, return all lucky numbers in the matrix in any order.

A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.

 

Example 1:

Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column
Example 2:

Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.
Example 3:

Input: matrix = [[7,8],[1,2]]
Output: [7]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= n, m <= 50
1 <= matrix[i][j] <= 10^5.
All elements in the matrix are distinct.






CODE:

class Solution {
    public List<Integer> luckyNumbers (int[][] matrix) {
        int row=matrix.length;
        int col=matrix[0].length;
        List<Integer> res = new ArrayList();
        
            for(int i=0;i<row;i++){
                int min=Integer.MAX_VALUE;
                int k=0;
                for(int j=0;j<col;j++){
                    if(matrix[i][j]<min){
                        min=matrix[i][j];
                        k=j;
                    }
                }
               
                boolean flag=true;
                for(int j=0;j<row;j++){
                    if(min<matrix[j][k]){
                        flag=false;
                        break;
                    }
                }
                
                if(flag){res.add(matrix[i][k]);}
            }
        
        
        
        
     return res;   
    }
}



SUBMISSION:
Success
Runtime: 1 ms, faster than 98.45% of Java online submissions for Lucky Numbers in a Matrix.
Memory Usage: 40.5 MB, less than 41.99% of Java online submissions for Lucky Numbers in a Matrix.
