QUESTION: 392. Is Subsequence
Given a string s and a string t, check if s is subsequence of t.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ace" is a subsequence of "abcde" while "aec" is not).

Follow up:
If there are lots of incoming S, say S1, S2, ... , Sk where k >= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?

Credits:
Special thanks to @pbrother for adding this problem and creating all test cases.

 

Example 1:

Input: s = "abc", t = "ahbgdc"
Output: true
Example 2:

Input: s = "axc", t = "ahbgdc"
Output: false
 

Constraints:

0 <= s.length <= 100
0 <= t.length <= 10^4
Both strings consists only of lowercase characters.







CODE:
class Solution {
    public boolean isSubsequence(String s, String t) {
        if(s.length()==0) return true;
        if(s.length()!=0 && t.length()==0) return false;
        
        char[] a=s.toCharArray();
        char[] b = t.toCharArray();
        int n1=s.length();
        int n2=t.length();
        int ia=n1-1;
        
        for(int i=n2-1;i>=0;i--){
            if(b[i]==a[ia]){
                ia--;
            }
            if(ia==-1){return true;}
        }
        
        
        return false;
        
    }
}


SUBMISSION:
Success
Runtime: 0 ms, faster than 100.00% of Java online submissions for Is Subsequence.
Memory Usage: 37.4 MB, less than 75.61% of Java online submissions for Is Subsequence.
