QUESTION: 670. Maximum Swap
Given a non-negative integer, you could swap two digits at most once to get the maximum valued number. Return the maximum valued number you could get.

Example 1:
Input: 2736
Output: 7236
Explanation: Swap the number 2 and the number 7.
Example 2:
Input: 9973
Output: 9973
Explanation: No swap.
Note:
The given number is in the range [0, 108]



CODE:

class Solution {
    public int maximumSwap(int num) {
        char[] A = Integer.toString(num).toCharArray();
        HashMap<Integer,Integer> last = new HashMap();
        for (int i = 0; i < A.length; i++) {
            last.put(A[i] - '0',i);
        }

        for (int i = 0; i < A.length; i++) {
            for (int d = 9; d > A[i] - '0'; d--) {
                if(!last.containsKey(d)){continue;}
                int j=last.get(d);
                if (j > i) {
                    char tmp = A[i];
                    A[i] = A[j];
                    A[j] = tmp;
                    return Integer.valueOf(new String(A));
                }
            }
        }
        return num;
    }
}



SUBMISSION:
Success
Runtime: 0 ms, faster than 100.00% of Java online submissions for Maximum Swap.
Memory Usage: 36.2 MB, less than 80.33% of Java online submissions for Maximum Swap.
