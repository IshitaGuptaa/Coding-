QUESTION: 728. Self Dividing Numbers
A self-dividing number is a number that is divisible by every digit it contains.

For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.

Also, a self-dividing number is not allowed to contain the digit zero.

Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.

Example 1:
Input: 
left = 1, right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
Note:

The boundaries of each input argument are 1 <= left <= right <= 10000.




CODE:

class Solution {
    public List<Integer> selfDividingNumbers(int left, int right) {
     
        List<Integer> A = new LinkedList();
        
        for(int i=left;i<10;i++){
            A.add(i);
        }
        int i=0;
        if(left<=11){i=11;}
        else{i=left;}
        for(i=i;i<right+1;i++){
            int num=i;
            boolean flag=true;
            while(num>0){
                int mod=num%10;
                if(mod==0 || i%mod!=0){flag=false;break;}
                num/=10;
            }
            if(flag){A.add(i);}
        }
        return A;
    }
}


SUBMISSION:

Success
Runtime: 2 ms, faster than 90.08% of Java online submissions for Self Dividing Numbers.
Memory Usage: 37.3 MB, less than 66.63% of Java online submissions for Self Dividing Numbers.
