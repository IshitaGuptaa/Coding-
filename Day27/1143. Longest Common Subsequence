CODE:

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        char[] X=text1.toCharArray(); 
    char[] Y=text2.toCharArray(); 
    int m = X.length; 
    int n = Y.length; 
  
    LongestCommonSubsequence lcs = new LongestCommonSubsequence(); 
    
    return lcs.lcs( X, Y, m, n ) ; 
   
    }
}
{ 
  
  int lcs( char[] X, char[] Y, int m, int n ) 
  { 
    int L[][] = new int[m+1][n+1]; 
  
    for (int i=0; i<=m; i++) 
    { 
      for (int j=0; j<=n; j++) 
      { 
        if (i == 0 || j == 0) 
            L[i][j] = 0; 
        else if (X[i-1] == Y[j-1]) 
            L[i][j] = L[i-1][j-1] + 1; 
        else
            L[i][j] = Math.max(L[i-1][j], L[i][j-1]); 
      } 
    } 
  return L[m][n]; 
  } 
  
  
}



SUBMISSION:

Success
Details 
Runtime: 11 ms, faster than 49.97% of Java online submissions for Longest Common Subsequence.
Memory Usage: 43.1 MB, less than 72.17% of Java online submissions for Longest Common Subsequence.
