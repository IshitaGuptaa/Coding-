QUESTION:207. Course Schedule
here are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
 

Constraints:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
1 <= numCourses <= 10^5




CODE:

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
     int row = prerequisites.length;
     
         ArrayList<Integer>[] A = new ArrayList[numCourses];
        for(int i=0;i<numCourses;i++){
            A[i]=new ArrayList<Integer>();
        }
        for(int i=0;i<row;i++){
            A[prerequisites[i][1]].add(prerequisites[i][0]);
        }
        int[] indegree = new int[numCourses];
        for(int i=0;i<numCourses;i++){
            for(int node:A[i]){
                indegree[node]++;
            }
        }
        int count=0;
        boolean[] vis = new boolean[numCourses];
        for(int i=0;i<numCourses;i++){
            if(indegree[i]==0 && !vis[i]){
                count=bfs(A,i,indegree,count,vis);}
        }
        
        if(count==numCourses){
            return true;
        }
        return false;
         
    }
    
    public int bfs(ArrayList<Integer>[] A, int s,int[] indegree,int count,boolean[] vis){
        
       count++;
        LinkedList<Integer> queue = new LinkedList();
        queue.add(s);
        vis[s]=true;
        while(!queue.isEmpty()){
            int a = queue.poll();
            for(int node:A[a]){
                if(--indegree[node]==0){
                    queue.add(node);
                    count++;
                    vis[node]=true;
                }
            }
        }
       return count;
    }
}


SUBMISSION:

Success
Runtime: 3 ms, faster than 91.52% of Java online submissions for Course Schedule.
Memory Usage: 40.2 MB, less than 60.23% of Java online submissions for Course Schedule
