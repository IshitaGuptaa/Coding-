Bellmanâ€“Ford Algorithm 

CODE:
import java.util.*; 
import java.lang.*; 
import java.io.*; 

class Main { 
	int N=9;
	void dijkstra(int[][] graph, int src){
	    int[] dist = new int[N];
	    //boolean[] visited = new boolean[N];
	   // int parent[] = new int[N];
	    Arrays.fill(dist,Integer.MAX_VALUE);
	    dist[src]=0;
	    
	    for(int i=0;i<N-1;i++){
	     for(int j=0;j<N;j++){
	         if((dist[i]!=Integer.MAX_VALUE) && graph[i][j]!=0 &&(dist[i]+graph[i][j])<dist[j]){
	             dist[j]=dist[i]+graph[i][j];
	         }
	     }
	    }
	     for(int i=0;i<N-1;i++){
	     for(int j=0;j<N;j++){
	         if((dist[i]!=Integer.MAX_VALUE) && graph[i][j]!=0 &&(dist[i]+graph[i][j])<dist[j]){
	            System.out.println("Negative CYCLE EXISTS");
	            return;
	         }
	     }}
	        
	    
	    
	    print(src,dist);
	    }
	    
	    
	    public void print(int src,int[] dist){
	       for(int i=0;i<N;i++){
	           System.out.print("\n"+src+"->"+i+"\t\t"+dist[i]+"\t\t");
	       }
	    }
	    
	  
	
	
	

	// Driver method 
	public static void main(String[] args) 
	{ 
		/* Let us create the example graph discussed above */
		int graph[][] = new int[][] { { 0, 4, 0, 0, 0, 0, 0, 8, 0 }, 
									{ 4, 0, 8, 0, 0, 0, 0, 11, 0 }, 
									{ 0, 8, 0, 7, 0, 4, 0, 0, 2 }, 
									{ 0, 0, 7, 0, 9, 14, 0, 0, 0 }, 
									{ 0, 0, 0, 9, 0, 10, 0, 0, 0 }, 
									{ 0, 0, 4, 14, 10, 0, 2, 0, 0 }, 
									{ 0, 0, 0, 0, 0, 2, 0, 1, 6 }, 
									{ 8, 11, 0, 0, 0, 0, 1, 0, 7 }, 
									{ 0, 0, 2, 0, 0, 0, 6, 7, 0 } }; 
		Main t = new Main(); 
		t.dijkstra(graph, 0);
} }
